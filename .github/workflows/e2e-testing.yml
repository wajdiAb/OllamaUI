name: Simple Deploy to EC2
#
on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      YOLO_IMG_TAG: "0.0.4"
      POSTGRES_VERSION: "16"
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      yolo_tag: ${{ env.YOLO_IMG_TAG }}
      postgres_version: ${{ env.POSTGRES_VERSION }}

    steps:
      - name: Get code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and push Docker image
        id: build
        run: |
          TAG="${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:$TAG .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:$TAG
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Copy docker-compose file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu

            # Ensure docker compose plugin is available
            docker compose version || { sudo apt-get update -y && sudo apt-get install -y docker-compose-plugin; }

            # Stop and remove previous stack if exists
            sudo docker compose down || true

            echo "Disk usage before cleanup:" && df -h || true
            echo "Docker disk usage before cleanup:" && sudo docker system df || true

            # Clean up images/containers/build cache (keeps named volumes like Postgres data)
            sudo docker container prune -f || true
            sudo docker image prune -af || true
            sudo docker builder prune -af || true

            # Create/overwrite .env for compose (values from workflow)
            cat > .env <<EOF
            OLLAMA_UI_IMG_TAG=${{ env.IMAGE_TAG }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            YOLO_IMG_TAG=${{ env.YOLO_IMG_TAG }}
            POSTGRES_VERSION=${{ env.POSTGRES_VERSION }}
            EOF

            # Pull images early to fail fast if tag missing
            sudo docker compose pull || true

            echo "Disk usage after cleanup:" && df -h || true
            echo "Docker disk usage after cleanup:" && sudo docker system df || true

            # Start stack
            sudo docker compose up -d --remove-orphans

            # Basic health check for UI (adjust path if needed)
            for i in {1..30}; do
              if curl -fsS http://localhost:3000/ >/dev/null 2>&1; then
                echo "UI is up."
                exit 0
              fi
              echo "Waiting for UI... ($i/30)"
              sleep 5
            done
            echo "UI did not become ready in time."
            sudo docker compose ps || true
            sudo docker compose logs --no-color || true
            exit 1

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy
    strategy:
      matrix:
        browser: [chrome, firefox]
        resolution: 
          - { name: 'desktop-full', width: 1920, height: 1080 }
          - { name: 'laptop', width: 1366, height: 768 }
          - { name: 'mobile', width: 375, height: 667 }
      fail-fast: false  # Continue other jobs even if one fails
    
    env:
      BASE_URL: http://${{ secrets.EC2_PUBLIC_IP }}:3000

    steps:
      - name: Checkout E2E tests repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: wajdiAb/OllamaUITesting
          token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}
          
      - name: Pre-create Allure environment.properties
        run: |
          mkdir -p allure-results
          cat > allure-results/environment.properties <<EOF
          Test.Framework=Selenium+Pytest
          CI.Platform=GitHub Actions
          Test.Types=UI Automation
          Browser=${BROWSER}
          Resolution=${SCREEN_WIDTH}x${SCREEN_HEIGHT}
          Environment=${ENVIRONMENT}
          Target.URL=${OLLAMA_URL}
          Ollama.Version=${OLLAMA_VERSION}
          Ollama.Image=${OLLAMA_UI_IMG_TAG}
          YOLO.Version=${YOLO_VERSION}
          YOLO.Image=${YOLO_IMG_TAG}
          Postgres.Version=${POSTGRES_VERSION}
          Git.Commit=${GITHUB_SHA}
          Git.Ref=${GITHUB_REF}
          EOF
          echo "Created allure-results/environment.properties:"; cat allure-results/environment.properties

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Install Firefox and GeckoDriver
        if: matrix.browser == 'firefox'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar
          # Remove Snap Firefox if installed
          sudo snap remove firefox || true
          # Download official Firefox
          wget -O firefox.tar.xz "https://download.mozilla.org/?product=firefox-latest&os=linux64&lang=en-US"
          tar xJf firefox.tar.xz
          sudo mv firefox /opt/firefox
          sudo ln -s /opt/firefox/firefox /usr/local/bin/firefox
          # Install GeckoDriver
          wget https://github.com/mozilla/geckodriver/releases/latest/download/geckodriver-v0.36.0-linux64.tar.gz
          tar -xvzf geckodriver-v0.36.0-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver

      - name: Wait for app to be ready
        run: |
          echo "Waiting for $BASE_URL to be reachable..."
          for i in {1..60}; do
            if curl -fsS "$BASE_URL" >/dev/null; then
              echo "App is up"; exit 0;
            fi
            sleep 5
          done
          echo "App did not become ready in time" >&2
          exit 1

      - name: Setup Python (if needed)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'


      # If your tests repo is Python-based (pytest + selenium)
      - name: Install E2E dependencies (Python)
        shell: bash
        run: |
            pip install -r requirements.txt

          
      - name: Run Selenium tests
        env:
          HEADLESS: true
          BROWSER: ${{ matrix.browser }}
          SCREEN_WIDTH: ${{ matrix.resolution.width }}
          SCREEN_HEIGHT: ${{ matrix.resolution.height }}
          OLLAMA_URL: http://${{secrets.EC2_PUBLIC_IP}}:3000
          TEST_NAME: ${{ matrix.browser }}-${{ matrix.resolution.name }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
          YOLO_VERSION: ${{ env.YOLO_VERSION }}
          YOLO_IMG_TAG: ${{ env.YOLO_IMG_TAG }}
          OLLAMA_VERSION: ${{ env.OLLAMA_VERSION }}
          OLLAMA_UI_IMG_TAG: ${{ env.OLLAMA_UI_IMG_TAG }}
          POSTGRES_VERSION: ${{ env.POSTGRES_VERSION }}
        run: |
          mkdir -p allure-results
          # Run your tests here with unique result directory
          pytest --alluredir=allure-results tests/
      
      - name: Upload Allure results as artifact
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: allure-results-${{ matrix.browser }}-${{ matrix.resolution.name }}
          path: allure-results/
          retention-days: 30

  allure-report:
    name: Allure Report
    runs-on: ubuntu-latest
    needs: e2e
    if: always()

    steps:
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          merge-multiple: true
          path: ./allure-results
      
      - name: Merge all results into single directory
        run: |
          mkdir -p allure-results
          for dir in allure-results-downloaded/*/; do
            if [ -d "$dir" ]; then
              cp -r "$dir"* allure-results/ 2>/dev/null || true
            fi
          done
      
      
      - name: Generate and Deploy Allure Report
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
          keep_reports: 20

      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}
          publish_dir: ./allure-report

