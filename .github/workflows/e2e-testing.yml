name: Simple Deploy to EC2

on:
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      YOLO_IMG_TAG: "0.0.4"
      POSTGRES_VERSION: "16"
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      yolo_tag: ${{ env.YOLO_IMG_TAG }}
      postgres_version: ${{ env.POSTGRES_VERSION }}
    
    steps:
    - name: Get code
      uses: actions/checkout@v4

    - name: Build and push Docker image
      id: build
      run: |
        # Login to DockerHub
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        
        TAG="${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
        
        # Build the image with a simple tag
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:$TAG .
        
        # Push the image to DockerHub
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:$TAG
        
        # Save the tag for later *steps* (if you need the tag value in another JOB, use artifacts, as seen in class)
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
        echo "image_tag=$TAG" >> $GITHUB_OUTPUT

    - name: Copy docker-compose file to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml"
        target: "/home/ubuntu/"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
            set -e
            cd /home/ubuntu
            # Stop and remove old containers if present
            sudo docker compose down || true

            # Write Compose environment variables for image selection
            cat > .env <<EOF
            OLLAMA_UI_IMG_TAG=${{ env.IMAGE_TAG }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            YOLO_IMG_TAG=${{ env.YOLO_IMG_TAG }}
            POSTGRES_VERSION=${{ env.POSTGRES_VERSION }}
            EOF

            # Deploy updated stack
            sudo docker compose up -d

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        resolution: ["1920x1080", "1366x768"]
    env:
      BASE_URL: http://${{ secrets.EC2_PUBLIC_IP }}:3000
    steps:
      - name: Checkout E2E tests repo
        uses: actions/checkout@v4
        with:
          # Update to your actual tests repo
          repository: wajdiAb/OllamaUITesting
          path: e2e
          # If the repo is private, add a PAT in secrets named GH_PAT and uncomment next line
          token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}

      - name: Setup Node.js (with npm cache)
        if: hashFiles('e2e/package-lock.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: e2e/package-lock.json

      - name: Setup Node.js (no cache)
        if: hashFiles('e2e/package-lock.json') == '' && hashFiles('e2e/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Wait for app to be ready
        run: |
          echo "Waiting for $BASE_URL to be reachable..."
          for i in {1..60}; do
            if curl -fsS "$BASE_URL" >/dev/null; then
              echo "App is up"; exit 0;
            fi
            sleep 5
          done
          echo "App did not become ready in time" >&2
          exit 1

      - name: Setup Python (if needed)
        if: hashFiles('e2e/requirements.txt') != ''
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install E2E dependencies
        working-directory: e2e
        run: |
          if [ -f package.json ]; then
            npm ci
          elif [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            echo "No package.json or requirements.txt found" >&2
            exit 1
          fi

      - name: Run Selenium E2E tests
        working-directory: e2e
        env:
          BASE_URL: ${{ env.BASE_URL }}
          BROWSER: ${{ matrix.browser }}
          VIEWPORT: ${{ matrix.resolution }}
          OLLAMA_UI_IMG_TAG: ${{ needs.deploy.outputs.image_tag }}
          YOLO_IMG_TAG: ${{ needs.deploy.outputs.yolo_tag }}
          POSTGRES_VERSION: ${{ needs.deploy.outputs.postgres_version }}
        run: |
          # Split resolution
          WIDTH="${VIEWPORT%x*}"; HEIGHT="${VIEWPORT#*x}"
          echo "Running Selenium on $BROWSER at ${WIDTH}x${HEIGHT}"
          # Ensure Allure results dir exists and has environment info
          mkdir -p allure-results
          cat > allure-results/environment.properties <<ENVVARS
          BASE_URL=${BASE_URL}
          BROWSER=${BROWSER}
          VIEWPORT=${VIEWPORT}
          OLLAMA_UI_IMG_TAG=${OLLAMA_UI_IMG_TAG}
          YOLO_IMG_TAG=${YOLO_IMG_TAG}
          POSTGRES_VERSION=${POSTGRES_VERSION}
          ENVVARS
          # Run tests (expects repo scripts to honor BROWSER/VIEWPORT)
          if [ -f package.json ]; then
            npm test
          elif [ -f requirements.txt ]; then
            pytest -s --alluredir=allure-results
          else
            echo "No test runner detected" >&2
            exit 1
          fi

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}-${{ matrix.resolution }}
          path: e2e/allure-results
          if-no-files-found: warn

  allure-report:
    name: Allure Report
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          merge-multiple: true
          path: ./allure-results

      - name: Generate Allure report
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: ./allure-results

      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
