name: Simple Deploy to EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
# 
permissions:
  contents: write

jobs:
  deploy:
    # Auto on push/internal PRs; skip fork PRs to protect secrets
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    env:
      YOLO_IMG_TAG: "0.0.4"
      POSTGRES_VERSION: "16"
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      yolo_tag: ${{ env.YOLO_IMG_TAG }}
      postgres_version: ${{ env.POSTGRES_VERSION }}
    
    steps:
    - name: Get code
      uses: actions/checkout@v4

    - name: Build and push Docker image
      id: build
      run: |
        # Login to DockerHub
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        
        TAG="${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
        
        # Build the image with a simple tag
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:$TAG .
        
        # Push the image to DockerHub
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:$TAG
        
        # Save the tag for later *steps* (if you need the tag value in another JOB, use artifacts, as seen in class)
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
        echo "image_tag=$TAG" >> $GITHUB_OUTPUT

    - name: Copy docker-compose file to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml"
        target: "/home/ubuntu/"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
            set -e
            cd /home/ubuntu
            # Stop and remove old containers if present
            sudo docker compose down || true

            echo "Disk usage before cleanup:" && df -h || true
            echo "Docker disk usage before cleanup:" && sudo docker system df || true

            # Free up Docker space without touching named volumes (keeps Postgres data)
            sudo docker container prune -f || true
            sudo docker image prune -af || true
            sudo docker builder prune -af || true

            # Write Compose environment variables for image selection
            cat > .env <<EOF
            OLLAMA_UI_IMG_TAG=${{ env.IMAGE_TAG }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            YOLO_IMG_TAG=${{ env.YOLO_IMG_TAG }}
            POSTGRES_VERSION=${{ env.POSTGRES_VERSION }}
            EOF

            # Pre-pull images to surface errors early
            sudo docker compose pull || true

            echo "Disk usage after cleanup:" && df -h || true
            echo "Docker disk usage after cleanup:" && sudo docker system df || true

            # Deploy updated stack
            sudo docker compose up -d

  e2e:
    name: E2E Tests
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    needs: deploy
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        resolution: ["1920x1080", "1366x768"]
    env:
      BASE_URL: http://${{ secrets.EC2_PUBLIC_IP }}:3000
    steps:
      - name: Checkout E2E tests repo
        uses: actions/checkout@v4
        with:
          # Update to your actual tests repo
          repository: wajdiAb/OllamaUITesting
          path: e2e
          # If the repo is private, add a PAT in secrets named GH_PAT and uncomment next line
          token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}

      - name: Setup Node.js (with npm cache)
        if: hashFiles('e2e/package-lock.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: e2e/package-lock.json

      - name: Setup Node.js (no cache)
        if: hashFiles('e2e/package-lock.json') == '' && hashFiles('e2e/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Install Firefox
        uses: browser-actions/setup-firefox@v1

      - name: Wait for app to be ready
        run: |
          echo "Waiting for $BASE_URL to be reachable..."
          for i in {1..60}; do
            if curl -fsS "$BASE_URL" >/dev/null; then
              echo "App is up"; exit 0;
            fi
            sleep 5
          done
          echo "App did not become ready in time" >&2
          exit 1

      - name: Setup Python (if needed)
        if: hashFiles('e2e/requirements.txt') != ''
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install E2E dependencies
        working-directory: e2e
        run: |
          if [ -f package.json ]; then
            npm ci
          elif [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            # Filter out non-existent 'allure' package if present
            if grep -Eq '^allure(==.*)?$' requirements.txt; then
              echo "Filtering 'allure' from requirements.txt (not a PyPI package)"
              sed -E '/^allure(==.*)?$/d' requirements.txt > requirements.filtered.txt
              REQ_FILE=requirements.filtered.txt
            else
              REQ_FILE=requirements.txt
            fi
            pip install -r "$REQ_FILE"
          else
            echo "No package.json or requirements.txt found" >&2
            exit 1
          fi

      - name: Patch Selenium driver for CI isolation
        working-directory: e2e
        run: |
          if [ -f utils/Driver_factory.py ]; then
            cat > ci_patch_driver.py << 'EOF'
            import os
            import re
            import tempfile

            # Read the original file
            with open('utils/Driver_factory.py', 'r', encoding='utf-8') as f:
                content = f.read()

            changed = False

            # Chrome driver patch
            chrome_pattern = r"driver\s*=\s*webdriver\.Chrome\(options=options\)"
            chrome_replacement = """        import os, tempfile
            tmpdir = os.environ.get("SELENIUM_USER_DATA_DIR") or tempfile.mkdtemp()
            vp = os.environ.get('VIEWPORT')
            try:
                options.add_argument(f'--user-data-dir={tmpdir}')
            except Exception:
                pass
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--headless=new')

            # Apply viewport if provided
            if vp and 'x' in vp:
                w,h = vp.split('x',1)
                try:
                    options.add_argument(f'--window-size={w},{h}')
                except Exception:
                    pass
            driver = webdriver.Chrome(options=options)"""

                # Firefox driver patch
                firefox_pattern = r"driver\s*=\s*webdriver\.Firefox\(options=options\)"
                firefox_replacement = """        import os, tempfile
            tmpdir = os.environ.get("SELENIUM_USER_DATA_DIR") or tempfile.mkdtemp()
            vp = os.environ.get('VIEWPORT')
            try:
                options.add_argument('-headless')
            except Exception:
                pass
            try:
                options.add_argument('-profile')
                options.add_argument(tmpdir)
            except Exception:
                pass
            if vp and 'x' in vp:
                w,h = vp.split('x',1)
                try:
                    options.add_argument(f'--width={w}')
                    options.add_argument(f'--height={h}')
                except Exception:
                    pass
            driver = webdriver.Firefox(options=options)"""

            # Apply patches
            if re.search(chrome_pattern, content):
                content = re.sub(chrome_pattern, chrome_replacement, content)
                changed = True

            if re.search(firefox_pattern, content):
                content = re.sub(firefox_pattern, firefox_replacement, content)
                changed = True

            if changed:
                with open('utils/Driver_factory.py', 'w', encoding='utf-8') as f:
                    f.write(content)
                print('Patched Selenium driver for CI isolation.')
            else:
                print('No driver patterns found to patch; skipping.')
            EOF

            python ci_patch_driver.py
          fi

      - name: Run Selenium E2E tests
        working-directory: e2e
        env:
          BASE_URL: ${{ env.BASE_URL }}
          BROWSER: ${{ matrix.browser }}
          VIEWPORT: ${{ matrix.resolution }}
          OLLAMA_UI_IMG_TAG: ${{ needs.deploy.outputs.image_tag }}
          YOLO_IMG_TAG: ${{ needs.deploy.outputs.yolo_tag }}
          POSTGRES_VERSION: ${{ needs.deploy.outputs.postgres_version }}
          SELENIUM_USER_DATA_DIR: ${{ runner.temp }}/selenium-profile-${{ matrix.browser }}-${{ matrix.resolution }}-${{ github.run_id }}-${{ github.run_attempt }}
        run: |
          # Split resolution
          WIDTH="${VIEWPORT%x*}"; HEIGHT="${VIEWPORT#*x}"
          echo "Running Selenium on $BROWSER at ${WIDTH}x${HEIGHT}"
          # Ensure Allure results dir exists and has environment info
          mkdir -p allure-results
          cat > allure-results/environment.properties <<ENVVARS
          BASE_URL=${BASE_URL}
          BROWSER=${BROWSER}
          VIEWPORT=${VIEWPORT}
          OLLAMA_UI_IMG_TAG=${OLLAMA_UI_IMG_TAG}
          YOLO_IMG_TAG=${YOLO_IMG_TAG}
          POSTGRES_VERSION=${POSTGRES_VERSION}
          ENVVARS
          # Run tests (expects repo scripts to honor BROWSER/VIEWPORT)
          if [ -f package.json ]; then
            npm test
          elif [ -f requirements.txt ]; then
            pytest -s --alluredir=allure-results
          else
            echo "No test runner detected" >&2
            exit 1
          fi

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}-${{ matrix.resolution }}
          path: e2e/allure-results
          if-no-files-found: warn

  allure-report:
    name: Allure Report
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          merge-multiple: true
          path: ./allure-results

      - name: Generate Allure report
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: ./allure-results

      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
